import logging
import asyncio
import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.markdown import hbold, hlink
from datetime import datetime
import threading
import time
import schedule

from web_hh_scrapping import HHScraper
from db_manager import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='app.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Initialize bot with token
BOT_TOKEN = "8181311299:AAH7RECw8gnwE7vlgR-sZNMzeGjSkPdt2vM"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Initialize database manager
db = DatabaseManager()

# Initialize scraper
scraper = HHScraper(search_query="Python")

# Global variable to track if update is running
is_updating = False

# Function to format vacancy for display in Telegram
def format_vacancy(vacancy):
    skills_text = ""
    if vacancy.get('skills'):
        skills_list = vacancy.get('skills', [])
        if skills_list:
            skills_text = f"\n{hbold('Skills:')} {', '.join(skills_list)}"
    
    return (
        f"{hbold('Vacancy:')} {vacancy['title']}\n"
        f"{hbold('Company:')} {vacancy['company']}\n"
        f"{hbold('Link:')} {hlink('Open vacancy', vacancy['link'])}"
        f"{skills_text}\n"
        f"{hbold('Added:')} {vacancy['created_at']}\n"
    )

# Command handler for /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        f"–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ Python –Ω–∞ hh.ru.\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/find Python - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π Python\n"
        f"/search Django - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É\n"
        f"/latest - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–∞–∫–∞–Ω—Å–∏–π\n"
        f"/update - –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤—Ä—É—á–Ω—É—é\n"
        f"/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π\n"
        f"/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n"
        f"/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    )

# Command handler for /find
@dp.message(Command("find"))
async def cmd_find(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—â–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ Python")
    await message.answer("üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ Python...")
    
    # Search for vacancies in the database
    vacancies = db.search_vacancies("Python", limit=10)
    
    if not vacancies:
        await message.answer("–í–∞–∫–∞–Ω—Å–∏–∏ Python –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # Send the results
    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π Python:")
    
    for vacancy in vacancies:
        await message.answer(format_vacancy(vacancy), parse_mode="HTML", disable_web_page_preview=False)

# Command handler for /search
@dp.message(Command("search"))
async def cmd_search(message: types.Message):
    # Extract the search query from the message
    command_parts = message.text.split(maxsplit=1)
    
    if len(command_parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: /search Django")
        return
    
    search_term = command_parts[1]
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—â–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'")
    await message.answer(f"üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'...")
    
    # Search for vacancies in the database
    vacancies = db.search_vacancies(search_term, limit=10)
    
    if not vacancies:
        await message.answer(f"–í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # Send the results
    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}':")
    
    for vacancy in vacancies:
        await message.answer(format_vacancy(vacancy), parse_mode="HTML", disable_web_page_preview=False)

# Command handler for /latest
@dp.message(Command("latest"))
async def cmd_latest(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    await message.answer("üïí –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...")
    
    # Get the latest vacancies from the database
    latest_vacancies = db.get_latest_vacancies(limit=5)
    
    if not latest_vacancies:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")
        return
    
    # Send the results
    await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(latest_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π:")
    
    for vacancy in latest_vacancies:
        await message.answer(format_vacancy(vacancy), parse_mode="HTML", disable_web_page_preview=False)

# Command handler for /update
@dp.message(Command("update"))
async def cmd_update(message: types.Message):
    global is_updating
    
    if is_updating:
        await message.answer("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π")
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π...")
    
    # Run the update in a separate thread to avoid blocking the bot
    update_thread = threading.Thread(target=update_vacancies, args=(message.chat.id,))
    update_thread.start()

# Command handler for /subscribe
@dp.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    user_id = message.from_user.id
    
    # Add user to subscribers
    if db.add_subscription(user_id):
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π!\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö Python.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Command handler for /unsubscribe
@dp.message(Command("unsubscribe"))
async def cmd_unsubscribe(message: types.Message):
    user_id = message.from_user.id
    
    # Remove user from subscribers
    if db.remove_subscription(user_id):
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Command handler for /stats
@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    total_vacancies = db.count_vacancies()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_vacancies}")

# Function to update vacancies and notify the chat
def update_vacancies(chat_id=None):
    global is_updating
    
    try:
        is_updating = True
        logging.info("–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π")
        
        # Run the scraper once
        _, new_vacancies, _ = scraper.run_once()
        
        # Add new vacancies to the database
        added_count = db.add_multiple_vacancies(new_vacancies)
        
        # Save to JSON file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        scraper.save_to_json(new_vacancies, f"new_vacancies_{timestamp}.json")
        
        # Notify the chat if a chat_id is provided
        if chat_id and added_count > 0:
            asyncio.run(bot.send_message(
                chat_id,
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
            ))
        elif chat_id:
            asyncio.run(bot.send_message(
                chat_id,
                "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            ))
        
        # Notify subscribers about new vacancies
        if added_count > 0:
            notify_subscribers(new_vacancies)
            
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        if chat_id:
            asyncio.run(bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}"
            ))
    finally:
        is_updating = False

# Function to notify subscribers about new vacancies
def notify_subscribers(new_vacancies):
    if not new_vacancies:
        return
    
    subscribers = db.get_all_subscribers()
    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ {len(new_vacancies)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö")
    
    for subscriber in subscribers:
        user_id = subscriber['user_id']
        
        try:
            # Send notification about new vacancies
            asyncio.run(bot.send_message(
                user_id,
                f"üîî –ù–∞–π–¥–µ–Ω–æ {len(new_vacancies)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π Python!"
            ))
            
            # Send up to 3 new vacancies
            for vacancy in new_vacancies[:3]:
                asyncio.run(bot.send_message(
                    user_id,
                    format_vacancy(vacancy),
                    parse_mode="HTML",
                    disable_web_page_preview=False
                ))
                
            # If there are more than 3 vacancies, suggest using /latest
            if len(new_vacancies) > 3:
                asyncio.run(bot.send_message(
                    user_id,
                    f"–ò –µ—â–µ {len(new_vacancies) - 3} –≤–∞–∫–∞–Ω—Å–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /latest, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏."
                ))
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# Schedule regular updates
def schedule_updates():
    schedule.every(10).minutes.do(update_vacancies)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

# Main function to start the bot
async def main():
    # Start the scheduler in a separate thread
    scheduler_thread = threading.Thread(target=schedule_updates)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    
    # Start the bot
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    # Run the initial update to populate the database
    logging.info("–ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    update_vacancies()
    
    # Start the bot
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(main()) 